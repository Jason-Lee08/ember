import logging
from enum import Enum
from typing import Any, Optional, Union

from ember.core.registry.model.registry.model_enum import ModelEnum, parse_model_str
from ember.core.registry.model.registry.model_registry import ModelRegistry
from ember.core.registry.model.providers.base_provider import BaseProviderModel
from ember.core.registry.model.services.usage_service import UsageService
from ember.core.registry.model.schemas.chat_schemas import ChatResponse
from ember.core.exceptions import ProviderAPIError


class ModelService:
    """Facade for retrieving and invoking models by their identifier.

    This high-level service integrates with a ModelRegistry to obtain model instances and,
    when available, logs usage statistics via a UsageService.

    Attributes:
        _registry (ModelRegistry): Registry that stores and provides model objects.
        _usage_service (Optional[UsageService]): Service responsible for recording usage data.
        _default_model_id (Optional[Union[str, Enum]]): Default identifier for models if none is supplied.
        _logger (logging.Logger): Logger instance for capturing application events.
    """

    def __init__(
        self,
        registry: ModelRegistry,
        usage_service: Optional[UsageService] = None,
        default_model_id: Optional[Union[str, Enum]] = None,
        logger: Optional[logging.Logger] = None,
    ) -> None:
        """Initializes a ModelService instance.

        Args:
            registry (ModelRegistry): The registry instance used to retrieve model objects.
            usage_service (Optional[UsageService]): Service to record model usage statistics.
            default_model_id (Optional[Union[str, Enum]]): Default model identifier when none is provided.
            logger (Optional[logging.Logger]): Logger instance; if not supplied, a default logger
                named after the class is created.
        """
        self._registry: ModelRegistry = registry
        self._usage_service: Optional[UsageService] = usage_service
        self._default_model_id: Optional[Union[str, Enum]] = default_model_id
        self._logger: logging.Logger = logger or logging.getLogger(
            self.__class__.__name__
        )

    def get_model(
        self, model_id: Optional[Union[str, Enum]] = None
    ) -> BaseProviderModel:
        """Retrieves the model instance corresponding to the given identifier.

        If no model_id is provided, the default model identifier is used.
        For a ModelEnum value, its `value` attribute is extracted.
        The identifier is validated via `parse_model_str`; if validation fails, the raw identifier is retained.

        Args:
            model_id (Optional[Union[str, Enum]]): A string or ModelEnum representing the model identifier.
                If not provided, the default model identifier is used.

        Returns:
            BaseProviderModel: The model instance matching the validated identifier.

        Raises:
            ValueError: If neither a model identifier nor a default is provided, or if the model is not found.
        """
        if model_id is None:
            if self._default_model_id is None:
                raise ValueError("No model_id provided and no default_model_id set.")
            model_id = self._default_model_id

        raw_id: str = model_id.value if isinstance(model_id, ModelEnum) else model_id
        try:
            validated_id: str = parse_model_str(raw_id)
        except ValueError:
            validated_id = raw_id

        model: Optional[BaseProviderModel] = self._registry.get_model(validated_id)
        if model is None:
            raise ValueError(f"Model '{validated_id}' not found.")
        return model

    def invoke_model(self, model_id: str, prompt: str, **kwargs: Any) -> ChatResponse:
        """Invokes a model using the specified identifier, prompt, and additional parameters.

        This method retrieves the model from the registry and triggers its provider-specific inference.
        If a UsageService is provided and the response contains usage data, the usage record is updated.

        Args:
            model_id (str): Identifier of the model to invoke.
            prompt (str): Prompt string to be passed to the model.
            **kwargs (Any): Additional keyword arguments for model invocation.

        Returns:
            ChatResponse: The response generated by the model.

        Raises:
            ProviderAPIError: If an error occurs during the model's invocation.
        """
        model: BaseProviderModel = self.get_model(model_id=model_id)
        try:
            response: ChatResponse = model(prompt=prompt, **kwargs)
        except Exception as exc:
            self._logger.exception(
                "Error invoking model '%s'.", model.model_info.model_id
            )
            raise ProviderAPIError(
                f"Error invoking model {model.model_info.model_id}"
            ) from exc

        if self._usage_service is not None:
            if (usage := getattr(response, "usage", None)) is not None:
                self._usage_service.add_usage_record(
                    model_id=model.model_info.model_id, usage_stats=usage
                )
        return response

    # Aliases for method invocation.
    forward = invoke_model
    __call__ = invoke_model
